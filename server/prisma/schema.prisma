generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PATIENT
  DOCTOR
}

model Patient {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  dob          DateTime      @db.Timestamp(6)
  dod          DateTime?     @db.Timestamp(6)
  gender       String
  phone        String?
  email        String?
  address      String?
  bloodGroup   String?       @map("blood_group") @db.VarChar(2)
  vitalRecords VitalRecord[]

  @@map("patients")
  RecordPermission RecordPermission[]
}

model Doctor {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String
  dob                  DateTime              @db.Timestamp(6)
  dod                  DateTime?             @db.Timestamp(6)
  gender               String?
  phone                String?
  email                String?
  address              String?
  doctorQualifications DoctorQualification[]
  doctorRegistrations  DoctorRegistration[]
  vitalRecords         VitalRecord[]

  RecordPermission RecordPermission[]
  @@map("doctors")
}

model DoctorQualification {
  id           String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  doctor_id    String @db.Uuid
  title        String
  year         Int
  organization String
  doctor       Doctor @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("doctor_qualifications")
}

model DoctorRegistration {
  id           String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  doctor_id    String @db.Uuid
  reg_no       String @unique
  year         Int
  organization String
  doctor       Doctor @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("doctor_registrations")
}

model VitalRecord {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  patientId   String   @map("patient_id") @db.Uuid
  temperature Decimal? @db.Decimal(10, 4)
  heartRate   Decimal? @map("heart_rate") @db.Decimal(10, 4)
  respRate    Decimal? @map("resp_rate") @db.Decimal(10, 4)
  o2sat       Decimal? @db.Decimal(10, 4)
  sbp         Int?
  dpb         Int?
  rhythm      String?
  pain        String?
  addedBy     String?  @map("added_by") @db.Uuid
  doctor      Doctor?  @relation(fields: [addedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  RecordPermission RecordPermission[]
  @@map("vital_records")
}

model Auth {
  nonce         String
  publicAddress String @id
  userId        String @map("user_id") @db.Uuid
  role          Role   @default(PATIENT)
}

model AuditEvent {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  eventAddress   String
  timestamp      DateTime? @default(now()) @db.Timestamp(6)
  eventType      String
  status         String
  accountAddress String
  ip             String
}

model RecordPermission {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  recordId  String       @db.Uuid
  patientId String       @db.Uuid
  doctorId  String       @db.Uuid
  read      Boolean      @default(false)
  write     Boolean      @default(false)
  manage    Boolean      @default(false)
  patient   Patient?     @relation(fields: [patientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  doctor    Doctor?      @relation(fields: [doctorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  record    VitalRecord? @relation(fields: [recordId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("record_permissions")
}
